{"version":3,"sources":["webpack://openseadragon-imaginghelper/webpack/universalModuleDefinition","webpack://openseadragon-imaginghelper/webpack/bootstrap","webpack://openseadragon-imaginghelper/external \"openseadragon\"","webpack://openseadragon-imaginghelper/./src/imaginghelper.js"],"names":["OSD","this","options","imagingHelper","$","_viewer","_worldIndex","imgWidth","imgHeight","imgAspectRatio","_zoomFactor","_minZoom","_maxZoom","_zoomStepPercent","_haveImage","_viewerSize","_viewportWidth","_viewportHeight","_viewportOrigin","OpenSeadragon","_viewportCenter","_onOpen","_onClose","_onAnimation","_onAnimationFinish","_onResize","_onFullPage","_onFullScreen","_onWorldAddItem","_onWorldRemoveItem","_onWorldItemIndexChange","_onWorldMetricsChange","addHandler","Object","value","ImagingHelper","removeHandler","destroy","viewer","raiseEvent","viewportWidth","viewportHeight","viewportOrigin","viewportCenter","zoomFactor","boundsRect","viewport","x","y","getViewerContainerSize","_raiseImageViewChanged","element","newViewerSize","center","zoom","resize","zoomTo","panTo","minZoomLevel","maxZoomLevel","centerpoint","newzoom","setZoomFactor","newzoomfactor","logpoint","zoomAboutLogicalPoint","physicalToLogicalX","point","physicalToLogicalY","logicalToPhysicalX","logicalToPhysicalY","distance","logicalToDataX","logicalToDataY","dataToLogicalX","dataToLogicalY","physicalToDataX","physicalToDataY","world","getItemAt","tiledImage","dataToPhysicalX","dataToPhysicalY","_trackZoomPan","window"],"mappings":"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","file":"openseadragon-imaginghelper.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"openseadragon\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"openseadragon\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"openseadragon-imaginghelper\"] = factory(require(\"openseadragon\"));\n\telse\n\t\troot[\"openseadragon-imaginghelper\"] = factory(root[\"openseadragon\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import OpenSeadragon from 'openseadragon';\n\n/**\n * @file openseadragon-imaginghelper.js\n * @version 2.2.0\n * @author Mark Salsbery <msalsbery@hotmail.com>\n *\n */\n\n/**\n * @module openseadragon-imaginghelper\n * @version 2.2.0\n * @requires module:openseadragon\n */\n\nexport default (function (OSD, $) {\n\tif (!OSD.version || OSD.version.major < 2) {\n\t\tthrow new Error(\n\t\t\t'OpenSeadragonImagingHelper requires OpenSeadragon version 2.0.0+'\n\t\t);\n\t}\n\n\t/**\n\t * Creates a new ImagingHelper attached to the viewer.\n\t *\n\t * @method activateImagingHelper\n\t * @memberof external:\"OpenSeadragon.Viewer\"#\n\t * @param {Object} options\n\t * @param {external:\"OpenSeadragon.EventHandler\"} [options.onImageViewChanged] - {@link OpenSeadragonImaging.ImagingHelper.event:image-view-changed} handler method.\n\t * @param {Integer} [options.worldIndex] - The index of the image for world.getItemAt\n\t * @returns {OpenSeadragonImaging.ImagingHelper}\n\t *\n\t **/\n\tOSD.Viewer.prototype.activateImagingHelper = function (options) {\n\t\tif (!this.imagingHelper) {\n\t\t\toptions = options || {};\n\t\t\toptions.viewer = this;\n\t\t\tthis.imagingHelper = new $.ImagingHelper(options);\n\t\t}\n\t\treturn this.imagingHelper;\n\t};\n\n\t/**\n\t * Creates a new ImagingHelper attached to the viewer instance passed in the options parameter.\n\t *\n\t * @class ImagingHelper\n\t * @classdesc Provides imaging helper methods and properties for the OpenSeadragon viewer.\n\t * @memberof OpenSeadragonImaging\n\t * @extends external:\"OpenSeadragon.EventSource\"\n\t * @param {Object} options\n\t * @param {external:\"OpenSeadragon.Viewer\"} options.viewer - Required! Reference to OpenSeadragon viewer to attach to.\n\t * @param {external:\"OpenSeadragon.EventHandler\"} [options.onImageViewChanged] - {@link OpenSeadragonImaging.ImagingHelper.event:image-view-changed} handler method.\n\t * @param {Integer} [options.worldIndex] - The index of the image for world.getItemAt\n\t *\n\t **/\n\t$.ImagingHelper = function (options) {\n\t\tOSD.EventSource.call(this);\n\n\t\toptions = options || {};\n\n\t\tif (!options.viewer) {\n\t\t\tthrow new Error('A viewer must be specified.');\n\t\t}\n\t\tif (options.viewer.imagingHelper) {\n\t\t\tthrow new Error('Viewer already has an ImagingHelper.');\n\t\t}\n\n\t\tthis._viewer = options.viewer;\n\n\t\tif (typeof options.worldIndex === 'number') {\n\t\t\tthis._worldIndex = options.worldIndex;\n\t\t} else {\n\t\t\tthis._worldIndex = 0;\n\t\t}\n\n\t\t// Add this object to the Viewer\n\t\tthis._viewer.imagingHelper = this;\n\n\t\t/**\n\t\t * A reference to the options passed at creation.\n\t\t * @member {object} options\n\t\t * @memberof OpenSeadragonImaging.ImagingHelper#\n\t\t * @property {external:\"OpenSeadragon.Viewer\"} viewer - Reference to OpenSeadragon viewer this ImagingHelper is attached to.\n\t\t * @property {external:\"OpenSeadragon.EventHandler\"} [onImageViewChanged] - {@link OpenSeadragonImaging.ImagingHelper.event:image-view-changed} handler method.\n\t\t */\n\t\tthis.options = options;\n\t\t/**\n\t\t * The image's native width in pixels.\n\t\t * @member {number} imgWidth\n\t\t * @memberof OpenSeadragonImaging.ImagingHelper#\n\t\t */\n\t\tthis.imgWidth = 0.0;\n\t\t/**\n\t\t * The image's native height in pixels.\n\t\t * @member {number} imgHeight\n\t\t * @memberof OpenSeadragonImaging.ImagingHelper#\n\t\t */\n\t\tthis.imgHeight = 0.0;\n\t\t/**\n\t\t * The image's aspect ratio (width / height).\n\t\t * @member {number} imgAspectRatio\n\t\t * @memberof OpenSeadragonImaging.ImagingHelper#\n\t\t */\n\t\tthis.imgAspectRatio = 0.0;\n\n\t\t// Private\n\t\tthis._zoomFactor = 1.0;\n\t\tthis._minZoom = 0.001;\n\t\tthis._maxZoom = 10;\n\t\tthis._zoomStepPercent = 30;\n\t\tthis._haveImage = false;\n\t\tthis._viewerSize = null;\n\t\t// Unadjusted viewport settings (aspect ratio not applied)\n\t\t// All coordinates are logical (0 to 1) relative to the image\n\t\tthis._viewportWidth = 0.0;\n\t\tthis._viewportHeight = 0.0;\n\t\tthis._viewportOrigin = new OpenSeadragon.Point(0, 0);\n\t\tthis._viewportCenter = new OpenSeadragon.Point(0, 0);\n\n\t\t// Wire up event handlers\n\t\tthis._onOpen = OSD.delegate(this, this.onOpen);\n\t\tthis._onClose = OSD.delegate(this, this.onClose);\n\t\tthis._onAnimation = OSD.delegate(this, this.onAnimation);\n\t\tthis._onAnimationFinish = OSD.delegate(this, this.onAnimationFinish);\n\t\tthis._onResize = OSD.delegate(this, this.onResize);\n\t\tthis._onFullPage = OSD.delegate(this, this.onFullPage);\n\t\tthis._onFullScreen = OSD.delegate(this, this.onFullScreen);\n\t\tthis._onWorldAddItem = OSD.delegate(this, this.onWorldAddItem);\n\t\tthis._onWorldRemoveItem = OSD.delegate(this, this.onWorldRemoveItem);\n\t\tthis._onWorldItemIndexChange = OSD.delegate(\n\t\t\tthis,\n\t\t\tthis.onWorldItemIndexChange\n\t\t);\n\t\tthis._onWorldMetricsChange = OSD.delegate(\n\t\t\tthis,\n\t\t\tthis.onWorldMetricsChange\n\t\t);\n\t\tif (options.onImageViewChanged) {\n\t\t\tthis.addHandler('image-view-changed', options.onImageViewChanged);\n\t\t}\n\t\tthis._viewer.addHandler('open', this._onOpen);\n\t\tthis._viewer.addHandler('close', this._onClose);\n\t\tthis._viewer.addHandler('animation', this._onAnimation);\n\t\tthis._viewer.addHandler('animation-finish', this._onAnimationFinish);\n\t\tthis._viewer.addHandler('resize', this._onResize);\n\t\tthis._viewer.addHandler('full-page', this._onFullPage);\n\t\tthis._viewer.addHandler('full-screen', this._onFullScreen);\n\t\t// this._viewer.world.addHandler('add-item', this._onWorldAddItem);\n\t\t// this._viewer.world.addHandler('remove-item', this._onWorldRemoveItem);\n\t\t// this._viewer.world.addHandler(\n\t\t// \t'item-index-change',\n\t\t// \tthis._onWorldItemIndexChange\n\t\t// );\n\t\t// this._viewer.world.addHandler(\n\t\t// \t'metrics-change',\n\t\t// \tthis._onWorldMetricsChange\n\t\t// );\n\t};\n\n\t// Inherit OpenSeadragon.EventSource\n\t$.ImagingHelper.prototype = Object.create(OSD.EventSource.prototype);\n\n\t/**\n\t * ImagingHelper version.\n\t * @member {Object} OpenSeadragonImaging.ImagingHelper.version\n\t * @static\n\t * @property {String} versionStr - The version number as a string ('major.minor.revision').\n\t * @property {Number} major - The major version number.\n\t * @property {Number} minor - The minor version number.\n\t * @property {Number} revision - The revision number.\n\t */\n\t$.ImagingHelper.version = {\"versionStr\":\"2.2.0\",\"major\":2,\"minor\":2,\"revision\":0};\n\n\tObject.defineProperty($.ImagingHelper.prototype, 'constructor', {\n\t\tenumerable: false,\n\t\tvalue: $.ImagingHelper\n\t});\n\n\t/**\n\t * Remove hooks, event handlers, and OpenSeadragon references. Call before\n\t * OpenSeadragon.Viewer.destroy().\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#destroy\n\t * @since 2.2.0\n\t */\n\t$.ImagingHelper.prototype.destroy = function () {\n\t\tif (this.options.onImageViewChanged) {\n\t\t\tthis.removeHandler(\n\t\t\t\t'image-view-changed',\n\t\t\t\tthis.options.onImageViewChanged\n\t\t\t);\n\t\t}\n\t\tthis._viewer.removeHandler('open', this._onOpen);\n\t\tthis._viewer.removeHandler('close', this._onClose);\n\t\tthis._viewer.removeHandler('animation', this._onAnimation);\n\t\tthis._viewer.removeHandler('animation-finish', this._onAnimationFinish);\n\t\tthis._viewer.removeHandler('resize', this._onResize);\n\t\tthis._viewer.removeHandler('full-page', this._onFullPage);\n\t\tthis._viewer.removeHandler('full-screen', this._onFullScreen);\n\t\t// this._viewer.world.removeHandler('add-item', this._onWorldAddItem);\n\t\t// this._viewer.world.removeHandler(\n\t\t// \t'remove-item',\n\t\t// \tthis._onWorldRemoveItem\n\t\t// );\n\t\t// this._viewer.world.removeHandler(\n\t\t// \t'item-index-change',\n\t\t// \tthis._onWorldItemIndexChange\n\t\t// );\n\t\t// this._viewer.world.removeHandler(\n\t\t// \t'metrics-change',\n\t\t// \tthis._onWorldMetricsChange\n\t\t// );\n\t\tthis._viewer.imagingHelper = null;\n\t\tthis._viewer.destroy();\n\t\tthis._viewer = null;\n\t\tthis.options.viewer = null;\n\t};\n\n\t/*\n\t *\n\t * Raises the {@link OpenSeadragonImaging.ImagingHelper.image-view-changed} event\n\t *\n\t * @private\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#_raiseImageViewChanged\n\t *\n\t **/\n\t$.ImagingHelper.prototype._raiseImageViewChanged = function () {\n\t\t/**\n\t\t * Raised whenever the viewer's zoom or pan changes and the ImagingHelper's properties have been updated.\n\t\t * @event image-view-changed\n\t\t * @memberof OpenSeadragonImaging.ImagingHelper\n\t\t * @type {Object}\n\t\t * @property {OpenSeadragonImaging.ImagingHelper} eventSource - A reference to the ImagingHelper which raised the event.\n\t\t * @property {number} viewportWidth - Width of viewport in logical coordinates.\n\t\t * @property {number} viewportHeight - Height of viewport in logical coordinates.\n\t\t * @property {external:\"OpenSeadragon.Point\"} viewportOrigin - Center of viewport in logical coordinates.\n\t\t * @property {external:\"OpenSeadragon.Point\"} viewportCenter - Center of viewport in logical coordinates.\n\t\t * @property {number} zoomFactor - Zoom factor.\n\t\t * @property {Object} [userData=null] - Arbitrary subscriber-defined object.\n\t\t */\n\t\tthis.raiseEvent('image-view-changed', {\n\t\t\tviewportWidth: this._viewportWidth,\n\t\t\tviewportHeight: this._viewportHeight,\n\t\t\tviewportOrigin: this._viewportOrigin,\n\t\t\tviewportCenter: this._viewportCenter,\n\t\t\tzoomFactor: this._zoomFactor\n\t\t});\n\t};\n\n\t/*\n\t *\n\t * Called whenever the OpenSeadragon viewer zoom/pan changes\n\t *\n\t * @private\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#_trackZoomPan\n\t * @fires OpenSeadragonImaging.ImagingHelper.image-view-changed\n\t *\n\t **/\n\t$.ImagingHelper.prototype._trackZoomPan = function () {\n\t\tvar boundsRect = this._viewer.viewport.getBounds(true);\n\t\tthis._viewportOrigin.x = boundsRect.x;\n\t\tthis._viewportOrigin.y = boundsRect.y * this.imgAspectRatio;\n\t\tthis._viewportWidth = boundsRect.width;\n\t\tthis._viewportHeight = boundsRect.height * this.imgAspectRatio;\n\t\tthis._viewportCenter.x =\n\t\t\tthis._viewportOrigin.x + this._viewportWidth / 2.0;\n\t\tthis._viewportCenter.y =\n\t\t\tthis._viewportOrigin.y + this._viewportHeight / 2.0;\n\t\tthis._zoomFactor =\n\t\t\tthis.getViewerContainerSize().x /\n\t\t\t(this._viewportWidth * this.imgWidth);\n\n\t\tthis._raiseImageViewChanged();\n\t};\n\n\t/**\n\t * Gets the size of the viewer's container element.\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#getViewerContainerSize\n\t * @returns {external:\"OpenSeadragon.Point\"}\n\t *\n\t **/\n\t$.ImagingHelper.prototype.getViewerContainerSize = function () {\n\t\t//return this._viewer.viewport.getContainerSize();\n\t\tvar element = this._viewer.container;\n\t\t//return new OSD.Point(\n\t\t//    (element.clientWidth === 0 ? 1 : element.clientWidth),\n\t\t//    (element.clientHeight === 0 ? 1 : element.clientHeight)\n\t\t//);\n\t\treturn new OSD.Point(element.clientWidth, element.clientHeight);\n\t};\n\n\t/**\n\t * Helper method for users of the OpenSeadragon.Viewer's autoResize = false option.\n\t * Call this whenever the viewer is resized, and the image will stay displayed at\n\t * the same zoom factor and same center point.\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#notifyResize\n\t * @fires OpenSeadragonImaging.ImagingHelper.image-view-changed\n\t *\n\t **/\n\t$.ImagingHelper.prototype.notifyResize = function () {\n\t\tvar newViewerSize, center, zoom;\n\t\tif (this._haveImage) {\n\t\t\tnewViewerSize = this.getViewerContainerSize();\n\t\t\tif (!newViewerSize.equals(this._viewerSize)) {\n\t\t\t\tthis._viewerSize = newViewerSize;\n\t\t\t\tcenter = new OpenSeadragon.Point(\n\t\t\t\t\tthis._viewportCenter.x,\n\t\t\t\t\tthis._viewportCenter.y / this.imgAspectRatio\n\t\t\t\t);\n\t\t\t\tzoom = this._zoomFactor;\n\t\t\t\tthis._viewer.viewport.resize(newViewerSize, false);\n\t\t\t\tthis._viewer.viewport.zoomTo(\n\t\t\t\t\t(zoom * this.imgWidth) / newViewerSize.x,\n\t\t\t\t\tnull,\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t\tthis._viewer.viewport.panTo(center, true);\n\t\t\t\tthis._raiseImageViewChanged();\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Gets the minimum zoom factor allowed.\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#getMinZoom\n\t * @returns {number}\n\t *\n\t **/\n\t$.ImagingHelper.prototype.getMinZoom = function () {\n\t\treturn this._minZoom;\n\t};\n\n\t/**\n\t * Sets the minimum zoom factor allowed.\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#setMinZoom\n\t * @param {number} value - The desired minimum zoom factor.\n\t *\n\t **/\n\t$.ImagingHelper.prototype.setMinZoom = function (value) {\n\t\tthis._minZoom = value;\n\t\tthis._viewer.minZoomLevel =\n\t\t\t(value * this.imgWidth) / this.getViewerContainerSize().x;\n\t};\n\n\t/**\n\t * Gets the maximum zoom factor allowed.\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#getMaxZoom\n\t * @returns {number}\n\t *\n\t **/\n\t$.ImagingHelper.prototype.getMaxZoom = function () {\n\t\treturn this._maxZoom;\n\t};\n\n\t/**\n\t * Sets the maximum zoom factor allowed.\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#setMaxZoom\n\t * @param {number} value - The desired maximum zoom factor.\n\t *\n\t **/\n\t$.ImagingHelper.prototype.setMaxZoom = function (value) {\n\t\tthis._maxZoom = value;\n\t\tthis._viewer.maxZoomLevel =\n\t\t\t(value * this.imgWidth) / this.getViewerContainerSize().x;\n\t};\n\n\t/**\n\t * Gets the percentage of the current zoom factor to increase/decrease when using the zoomIn/zoomOut methods.\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#getZoomStepPercent\n\t * @returns {number}\n\t *\n\t **/\n\t$.ImagingHelper.prototype.getZoomStepPercent = function () {\n\t\treturn this._zoomStepPercent;\n\t};\n\n\t/**\n\t * Sets the percentage of the current zoom factor to increase/decrease when using the zoomIn/zoomOut methods.\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#setZoomStepPercent\n\t * @param {number} value - The desired percentage.\n\t *\n\t **/\n\t$.ImagingHelper.prototype.setZoomStepPercent = function (value) {\n\t\tthis._zoomStepPercent = value;\n\t};\n\n\t/**\n\t * Zooms and/or pans the viewport based on a viewport width and center point.\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#setView\n\t * @param {number} width - The desired viewport width in logical units.\n\t * @param {number} height - The desired viewport width in logical units (currently not used, native image aspect ratio is preserved).\n\t * @param {external:\"OpenSeadragon.Point\"} centerpoint - The desired viewport center point in logical units.\n\t * @param {boolean} [immediately] - If true, the view is set immediately with no spring animation.\n\t *\n\t **/\n\t$.ImagingHelper.prototype.setView = function (\n\t\twidth,\n\t\theight,\n\t\tcenterpoint,\n\t\timmediately\n\t) {\n\t\tif (this._haveImage) {\n\t\t\tif (\n\t\t\t\tthis._viewportWidth !== width ||\n\t\t\t\tthis._viewportHeight !== height\n\t\t\t) {\n\t\t\t\tthis._viewer.viewport.zoomTo(1.0 / width, null, immediately);\n\t\t\t}\n\t\t\tif (\n\t\t\t\tthis._viewportCenter.x !== centerpoint.x ||\n\t\t\t\tthis._viewportCenter.y !== centerpoint.y\n\t\t\t) {\n\t\t\t\tthis._viewer.viewport.panTo(\n\t\t\t\t\tnew OpenSeadragon.Point(\n\t\t\t\t\t\tcenterpoint.x,\n\t\t\t\t\t\tcenterpoint.y / this.imgAspectRatio\n\t\t\t\t\t),\n\t\t\t\t\timmediately\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Gets the current zoom factor, the ratio of the displayed size to the image's native size.\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#getZoomFactor\n\t * @returns {number}\n\t *\n\t **/\n\t$.ImagingHelper.prototype.getZoomFactor = function () {\n\t\treturn this._zoomFactor;\n\t};\n\n\t/**\n\t * Sets the zoom factor, the ratio of the displayed size to the image's native size.\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#setZoomFactor\n\t * @param {number} value - The desired zoom factor.\n\t * @param {boolean} [immediately] - If true, the view is set immediately with no spring animation.\n\t *\n\t **/\n\t$.ImagingHelper.prototype.setZoomFactor = function (value, immediately) {\n\t\tif (this._haveImage && value !== this._zoomFactor && value > 0.0) {\n\t\t\tthis._viewer.viewport.zoomTo(\n\t\t\t\t(value * this.imgWidth) / this.getViewerContainerSize().x,\n\t\t\t\tnew OpenSeadragon.Point(\n\t\t\t\t\tthis._viewportCenter.x,\n\t\t\t\t\tthis._viewportCenter.y / this.imgAspectRatio\n\t\t\t\t),\n\t\t\t\timmediately\n\t\t\t);\n\t\t}\n\t};\n\n\t/**\n\t * Zooms in by a factor of getZoomStepPercent().\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#zoomIn\n\t * @param {boolean} [immediately] - If true, the view is set immediately with no spring animation.\n\t *\n\t **/\n\t$.ImagingHelper.prototype.zoomIn = function (immediately) {\n\t\tvar newzoom = this._zoomFactor;\n\t\tnewzoom *= 1.0 + this._zoomStepPercent / 100.0;\n\t\tif (newzoom > this._maxZoom) {\n\t\t\tnewzoom = this._maxZoom;\n\t\t}\n\t\tthis.setZoomFactor(newzoom, immediately);\n\t};\n\n\t/**\n\t * Zooms out by a factor of getZoomStepPercent().\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#zoomOut\n\t * @param {boolean} [immediately] - If true, the view is set immediately with no spring animation.\n\t *\n\t **/\n\t$.ImagingHelper.prototype.zoomOut = function (immediately) {\n\t\tvar newzoom = this._zoomFactor;\n\t\tnewzoom /= 1.0 + this._zoomStepPercent / 100.0;\n\t\tif (newzoom < this._minZoom) {\n\t\t\tnewzoom = this._minZoom;\n\t\t}\n\t\tthis.setZoomFactor(newzoom, immediately);\n\t};\n\n\t/**\n\t * Sets the zoom factor, the ratio of the displayed size to the image's native size, leaving the logical point in the same viewer position.\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#zoomAboutLogicalPoint\n\t * @param {number} newzoomfactor - The desired zoom factor.\n\t * @param {external:\"OpenSeadragon.Point\"} logpoint - The logical point to remain in current displayed position.\n\t * @param {boolean} [immediately] - If true, the view is set immediately with no spring animation.\n\t *\n\t **/\n\t$.ImagingHelper.prototype.zoomAboutLogicalPoint = function (\n\t\tnewzoomfactor,\n\t\tlogpoint,\n\t\timmediately\n\t) {\n\t\tif (\n\t\t\tthis._haveImage &&\n\t\t\tnewzoomfactor !== this._zoomFactor &&\n\t\t\tnewzoomfactor > 0.0\n\t\t) {\n\t\t\tthis._viewer.viewport.zoomTo(\n\t\t\t\t(newzoomfactor * this.imgWidth) /\n\t\t\t\t\tthis.getViewerContainerSize().x,\n\t\t\t\tnew OpenSeadragon.Point(\n\t\t\t\t\tlogpoint.x,\n\t\t\t\t\tlogpoint.y / this.imgAspectRatio\n\t\t\t\t),\n\t\t\t\timmediately\n\t\t\t);\n\t\t}\n\t};\n\n\t/**\n\t * Zooms in by a factor of getZoomStepPercent(), leaving the logical point in the same viewer position.\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#zoomInAboutLogicalPoint\n\t * @param {external:\"OpenSeadragon.Point\"} logpoint - The logical point to remain in current displayed position.\n\t * @param {boolean} [immediately] - If true, the view is set immediately with no spring animation.\n\t *\n\t **/\n\t$.ImagingHelper.prototype.zoomInAboutLogicalPoint = function (\n\t\tlogpoint,\n\t\timmediately\n\t) {\n\t\tvar newzoom = this._zoomFactor;\n\t\tnewzoom *= 1.0 + this._zoomStepPercent / 100.0;\n\t\tif (newzoom > this._maxZoom) {\n\t\t\tnewzoom = this._maxZoom;\n\t\t}\n\t\tthis.zoomAboutLogicalPoint(newzoom, logpoint, immediately);\n\t};\n\n\t/**\n\t * Zooms out by a factor of getZoomStepPercent(), leaving the logical point in the same viewer position.\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#zoomOutAboutLogicalPoint\n\t * @param {external:\"OpenSeadragon.Point\"} logpoint - The logical point to remain in current displayed position.\n\t * @param {boolean} [immediately] - If true, the view is set immediately with no spring animation.\n\t *\n\t **/\n\t$.ImagingHelper.prototype.zoomOutAboutLogicalPoint = function (\n\t\tlogpoint,\n\t\timmediately\n\t) {\n\t\tvar newzoom = this._zoomFactor;\n\t\tnewzoom /= 1.0 + this._zoomStepPercent / 100.0;\n\t\tif (newzoom < this._minZoom) {\n\t\t\tnewzoom = this._minZoom;\n\t\t}\n\t\tthis.zoomAboutLogicalPoint(newzoom, logpoint, immediately);\n\t};\n\n\t/**\n\t * Pans the view so the logical point is centered in the viewport.\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#centerAboutLogicalPoint\n\t * @param {external:\"OpenSeadragon.Point\"} logpoint - The desired center point.\n\t * @param {boolean} [immediately] - If true, the view is set immediately with no spring animation.\n\t *\n\t **/\n\t$.ImagingHelper.prototype.centerAboutLogicalPoint = function (\n\t\tlogpoint,\n\t\timmediately\n\t) {\n\t\tif (\n\t\t\tthis._haveImage &&\n\t\t\t(this._viewportCenter.x !== logpoint.x ||\n\t\t\t\tthis._viewportCenter.y !== logpoint.y)\n\t\t) {\n\t\t\tthis._viewer.viewport.panTo(\n\t\t\t\tnew OpenSeadragon.Point(\n\t\t\t\t\tlogpoint.x,\n\t\t\t\t\tlogpoint.y / this.imgAspectRatio\n\t\t\t\t),\n\t\t\t\timmediately\n\t\t\t);\n\t\t}\n\t};\n\n\t/**\n\t *\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#physicalToLogicalPoint\n\t *\n\t **/\n\t$.ImagingHelper.prototype.physicalToLogicalPoint = function (point) {\n\t\treturn new OpenSeadragon.Point(\n\t\t\tthis.physicalToLogicalX(point.x),\n\t\t\tthis.physicalToLogicalY(point.y)\n\t\t);\n\t};\n\n\t/**\n\t *\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#logicalToPhysicalPoint\n\t *\n\t **/\n\t$.ImagingHelper.prototype.logicalToPhysicalPoint = function (point) {\n\t\treturn new OpenSeadragon.Point(\n\t\t\tthis.logicalToPhysicalX(point.x),\n\t\t\tthis.logicalToPhysicalY(point.y)\n\t\t);\n\t};\n\n\t/**\n\t *\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#physicalToLogicalX\n\t *\n\t **/\n\t$.ImagingHelper.prototype.physicalToLogicalX = function (x) {\n\t\treturn this._haveImage\n\t\t\t? this._viewportOrigin.x +\n\t\t\t\t\t(x / this.getViewerContainerSize().x) * this._viewportWidth\n\t\t\t: 0;\n\t};\n\n\t/**\n\t *\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#physicalToLogicalY\n\t *\n\t **/\n\t$.ImagingHelper.prototype.physicalToLogicalY = function (y) {\n\t\treturn this._haveImage\n\t\t\t? this._viewportOrigin.y +\n\t\t\t\t\t(y / this.getViewerContainerSize().y) * this._viewportHeight\n\t\t\t: 0;\n\t};\n\n\t/**\n\t *\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#logicalToPhysicalX\n\t *\n\t **/\n\t$.ImagingHelper.prototype.logicalToPhysicalX = function (x) {\n\t\treturn this._haveImage\n\t\t\t? ((x - this._viewportOrigin.x) / this._viewportWidth) *\n\t\t\t\t\tthis.getViewerContainerSize().x\n\t\t\t: 0;\n\t};\n\n\t/**\n\t *\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#logicalToPhysicalY\n\t *\n\t **/\n\t$.ImagingHelper.prototype.logicalToPhysicalY = function (y) {\n\t\treturn this._haveImage\n\t\t\t? ((y - this._viewportOrigin.y) / this._viewportHeight) *\n\t\t\t\t\tthis.getViewerContainerSize().y\n\t\t\t: 0;\n\t};\n\n\t/**\n\t *\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#physicalToLogicalDistance\n\t *\n\t **/\n\t$.ImagingHelper.prototype.physicalToLogicalDistance = function (distance) {\n\t\treturn this._haveImage\n\t\t\t? (distance / this.getViewerContainerSize().x) * this._viewportWidth\n\t\t\t: 0;\n\t};\n\n\t/**\n\t *\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#logicalToPhysicalDistance\n\t *\n\t **/\n\t$.ImagingHelper.prototype.logicalToPhysicalDistance = function (distance) {\n\t\treturn this._haveImage\n\t\t\t? (distance / this._viewportWidth) * this.getViewerContainerSize().x\n\t\t\t: 0;\n\t};\n\n\t/**\n\t *\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#logicalToDataPoint\n\t *\n\t **/\n\t$.ImagingHelper.prototype.logicalToDataPoint = function (point) {\n\t\treturn new OpenSeadragon.Point(\n\t\t\tthis.logicalToDataX(point.x),\n\t\t\tthis.logicalToDataY(point.y)\n\t\t);\n\t};\n\n\t/**\n\t *\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#dataToLogicalPoint\n\t *\n\t **/\n\t$.ImagingHelper.prototype.dataToLogicalPoint = function (point) {\n\t\treturn new OpenSeadragon.Point(\n\t\t\tthis.dataToLogicalX(point.x),\n\t\t\tthis.dataToLogicalY(point.y)\n\t\t);\n\t};\n\n\t/**\n\t *\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#physicalToDataPoint\n\t *\n\t **/\n\t$.ImagingHelper.prototype.physicalToDataPoint = function (point) {\n\t\tif (this._viewer.world.getItemCount() === 1) {\n\t\t\treturn new OpenSeadragon.Point(\n\t\t\t\tthis.physicalToDataX(point.x),\n\t\t\t\tthis.physicalToDataY(point.y)\n\t\t\t);\n\t\t} else {\n\t\t\tvar tiledImage = this._viewer.world.getItemAt(this._worldIndex);\n\t\t\treturn tiledImage.viewerElementToImageCoordinates(point);\n\t\t}\n\t};\n\n\t/**\n\t *\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#dataToPhysicalPoint\n\t *\n\t **/\n\t$.ImagingHelper.prototype.dataToPhysicalPoint = function (point) {\n\t\treturn new OpenSeadragon.Point(\n\t\t\tthis.dataToPhysicalX(point.x),\n\t\t\tthis.dataToPhysicalY(point.y)\n\t\t);\n\t};\n\n\t/**\n\t *\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#logicalToDataX\n\t *\n\t **/\n\t$.ImagingHelper.prototype.logicalToDataX = function (x) {\n\t\treturn this._haveImage ? x * this.imgWidth : 0;\n\t};\n\n\t/**\n\t *\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#logicalToDataY\n\t *\n\t **/\n\t$.ImagingHelper.prototype.logicalToDataY = function (y) {\n\t\treturn this._haveImage ? y * this.imgHeight : 0;\n\t};\n\n\t/**\n\t *\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#dataToLogicalX\n\t *\n\t **/\n\t$.ImagingHelper.prototype.dataToLogicalX = function (x) {\n\t\treturn this._haveImage && this.imgWidth > 0 ? x / this.imgWidth : 0;\n\t};\n\n\t/**\n\t *\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#dataToLogicalY\n\t *\n\t **/\n\t$.ImagingHelper.prototype.dataToLogicalY = function (y) {\n\t\treturn this._haveImage && this.imgHeight > 0 ? y / this.imgHeight : 0;\n\t};\n\n\t/**\n\t *\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#physicalToDataX\n\t *\n\t **/\n\t$.ImagingHelper.prototype.physicalToDataX = function (x) {\n\t\tif (this._viewer.world.getItemCount() === 1) {\n\t\t\treturn this._haveImage && this.getViewerContainerSize().x > 0\n\t\t\t\t? (this._viewportOrigin.x +\n\t\t\t\t\t\t(x / this.getViewerContainerSize().x) *\n\t\t\t\t\t\t\tthis._viewportWidth) *\n\t\t\t\t\t\tthis.imgWidth\n\t\t\t\t: 0;\n\t\t} else {\n\t\t\tvar tiledImage = this._viewer.world.getItemAt(this._worldIndex);\n\t\t\tvar pt = tiledImage.viewerElementToImageCoordinates(\n\t\t\t\tnew OpenSeadragon.Point(x, 0)\n\t\t\t); //viewportToImageCoordinates x,y,cur or point,cur\n\t\t\treturn pt.x;\n\t\t}\n\t};\n\n\t/**\n\t *\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#physicalToDataY\n\t *\n\t **/\n\t$.ImagingHelper.prototype.physicalToDataY = function (y) {\n\t\tif (this._viewer.world.getItemCount() === 1) {\n\t\t\treturn this._haveImage && this.getViewerContainerSize().y > 0\n\t\t\t\t? (this._viewportOrigin.y +\n\t\t\t\t\t\t(y / this.getViewerContainerSize().y) *\n\t\t\t\t\t\t\tthis._viewportHeight) *\n\t\t\t\t\t\tthis.imgHeight\n\t\t\t\t: 0;\n\t\t} else {\n\t\t\tvar tiledImage = this._viewer.world.getItemAt(this._worldIndex);\n\t\t\tvar pt = tiledImage.viewerElementToImageCoordinates(\n\t\t\t\tnew OpenSeadragon.Point(0, y)\n\t\t\t); //viewportToImageCoordinates x,y,cur or point,cur\n\t\t\treturn pt.y;\n\t\t}\n\t};\n\n\t/**\n\t *\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#dataToPhysicalX\n\t *\n\t **/\n\t$.ImagingHelper.prototype.dataToPhysicalX = function (x) {\n\t\treturn this._haveImage && this.imgWidth > 0\n\t\t\t? ((x / this.imgWidth - this._viewportOrigin.x) /\n\t\t\t\t\tthis._viewportWidth) *\n\t\t\t\t\tthis.getViewerContainerSize().x\n\t\t\t: 0;\n\t};\n\n\t/**\n\t *\n\t *\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#dataToPhysicalY\n\t *\n\t **/\n\t$.ImagingHelper.prototype.dataToPhysicalY = function (y) {\n\t\treturn this._haveImage && this.imgHeight > 0\n\t\t\t? ((y / this.imgHeight - this._viewportOrigin.y) /\n\t\t\t\t\tthis._viewportHeight) *\n\t\t\t\t\tthis.getViewerContainerSize().y\n\t\t\t: 0;\n\t};\n\n\t/*\n\t * @private\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#onOpen\n\t *\n\t **/\n\t$.ImagingHelper.prototype.onOpen = function (/*event*/) {\n\t\t//OSD.console.log('!!! [onOpen]');\n\t\tvar tiledImage = this._viewer.world.getItemAt(this._worldIndex);\n\n\t\tthis._haveImage = true;\n\t\tthis.imgWidth = tiledImage.source.dimensions.x;\n\t\tthis.imgHeight = tiledImage.source.dimensions.y;\n\t\tthis.imgAspectRatio = this.imgWidth / this.imgHeight;\n\n\t\tthis._trackZoomPan();\n\t};\n\n\t/*\n\t * @private\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#onClose\n\t *\n\t **/\n\t$.ImagingHelper.prototype.onClose = function () {\n\t\t//OSD.console.log('!!! [onClose]');\n\t\tthis._haveImage = false;\n\t\tthis.imgWidth = 0.0;\n\t\tthis.imgHeight = 0.0;\n\t\tthis.imgAspectRatio = 0.0;\n\t};\n\n\t/*\n\t * @private\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#onAnimation\n\t *\n\t **/\n\t$.ImagingHelper.prototype.onAnimation = function () {\n\t\tthis._trackZoomPan();\n\t};\n\n\t/*\n\t * @private\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#onAnimationFinish\n\t *\n\t **/\n\t$.ImagingHelper.prototype.onAnimationFinish = function () {\n\t\tthis._trackZoomPan();\n\t};\n\n\t/*\n\t * @private\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#onResize\n\t *\n\t **/\n\t$.ImagingHelper.prototype.onResize = function () {\n\t\tif (this._viewer.autoResize) {\n\t\t\tthis._trackZoomPan();\n\t\t}\n\t};\n\n\t/*\n\t * @private\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#onFullPage\n\t *\n\t **/\n\t$.ImagingHelper.prototype.onFullPage = function () {\n\t\tthis._trackZoomPan();\n\t};\n\n\t/*\n\t * @private\n\t * @method OpenSeadragonImaging.ImagingHelper.prototype#onFullScreen\n\t *\n\t **/\n\t$.ImagingHelper.prototype.onFullScreen = function () {\n\t\tthis._trackZoomPan();\n\t};\n\n\t// /*\n\t//  * @private\n\t//  * @method OpenSeadragonImaging.ImagingHelper.prototype#onWorldAddItem\n\t//  *\n\t//  **/\n\t// $.ImagingHelper.prototype.onWorldAddItem = function (/*event*/) {\n\t// \t//OSD.console.log( '!!! onWorldAddItem', request.status, url );\n\t// \t//OSD.console.log('!!! [onWorldAddItem]');\n\t// \t// this._trackZoomPan();\n\t// };\n\n\t// /*\n\t//  * @private\n\t//  * @method OpenSeadragonImaging.ImagingHelper.prototype#onWorldRemoveItem\n\t//  *\n\t//  **/\n\t// $.ImagingHelper.prototype.onWorldRemoveItem = function (/*event*/) {\n\t// \t//OSD.console.log('!!! [onWorldRemoveItem]');\n\t// \t// this._trackZoomPan();\n\t// };\n\n\t// /*\n\t//  * @private\n\t//  * @method OpenSeadragonImaging.ImagingHelper.prototype#onWorldItemIndexChange\n\t//  *\n\t//  **/\n\t// $.ImagingHelper.prototype.onWorldItemIndexChange = function (/*event*/) {\n\t// \t//OSD.console.log('!!! [onWorldItemIndexChange]');\n\t// \t// this._trackZoomPan();\n\t// };\n\n\t// /*\n\t//  * @private\n\t//  * @method OpenSeadragonImaging.ImagingHelper.prototype#onWorldMetricsChange\n\t//  *\n\t//  **/\n\t// $.ImagingHelper.prototype.onWorldMetricsChange = function (/*event*/) {\n\t// \t//OSD.console.log('!!! [onWorldMetricsChange]');\n\t// \t// this._trackZoomPan();\n\t// };\n\n\treturn $.ImagingHelper;\n})(\n\tOpenSeadragon || window.OpenSeadragon,\n\t(window.OpenSeadragonImaging = window.OpenSeadragonImaging || {})\n);\n"],"sourceRoot":""}