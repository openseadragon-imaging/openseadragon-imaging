{"version":3,"sources":["webpack://openseadragon-consolehook/webpack/universalModuleDefinition","webpack://openseadragon-consolehook/webpack/bootstrap","webpack://openseadragon-consolehook/external \"openseadragon\"","webpack://openseadragon-consolehook/./src/consolehook.js"],"names":["OSD","options","$","this","origHandlers","Object","origHandler","handler","key","OpenSeadragon","window"],"mappings":";CAAA,cACA,kDACA,2CACA,sCACA,4BACA,yBACA,iEAEA,kDARA,CASC,oBACD,O,YCNA,cAGA,QACA,oBAGA,YACA,IACA,KACA,YAUA,OANC,EAAD,iCAGA,OAGA,UAvBA,SAiFA,OArDC,EAAD,IAGA,MAGA,oBACA,UACA,2BAA0C,uBAK1C,gBACA,gDACA,4CAAwD,iBAExD,sCAAiD,YAQjD,kBAEA,GADA,cACA,aACA,qDACA,0BAGA,GAFA,OACA,mCAAyC,wBACzC,2DAAgH,aAAqB,UAArI,IACA,UAIA,gBACA,sBACA,WAA2B,kBAC3B,WAAiC,UAEjC,OADC,EAAD,WACA,GAIA,kBAAsD,kDAGtD,OAIA,S,cClFA,a,6BAAA,O,IAAA,gBCgBe,UAAC,cAuFf,OAlEAA,kCAAsC,YAErC,OADAC,EAAUA,GAAVA,GACO,IAAIC,EAAX,YAAO,IAiBRA,cAAgB,YAAoB,IAAD,OAClCD,EAAUA,GAAVA,GAEAE,KAAKC,aAAL,GAHkC,kBAM7BC,OAAOA,UAAUA,eAArB,KAAIA,OACH,kBAAyBL,cAAzB,KAGC,YACA,IAAIM,EAAcN,EAAlB,QAAkBA,GAClBA,aAAmB,YACbO,aAAL,YAAI,GACHD,yBAJF,CAAD,QALF,IAAK,IAAL,OAASE,MA2BVN,sBAAwB,CAAC,WAAD,QAAsB,MAAtB,EAAgC,MAAhC,EAA0C,SAAW,GAQ7EA,gCAAkC,WACjC,IAAK,IAAL,KAAgBC,KAAhB,aACCH,aAAmBG,KAAnBH,aAAmB,GAEpBG,KAAKC,aAAL,IAGMF,EAAP,YAvFe,CAyFfO,KAAiBC,OAzFH,cA0FbA,OAAOA,qBAAuBA,OAAOA,sBA1FvC,O","file":"openseadragon-consolehook.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"openseadragon\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"openseadragon\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"openseadragon-consolehook\"] = factory(require(\"openseadragon\"));\n\telse\n\t\troot[\"openseadragon-consolehook\"] = factory(root[\"openseadragon\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import OpenSeadragon from 'openseadragon';\n\n/**\n * @file openseadragon-consolehook.js\n * @version 2.2.0\n * @author Mark Salsbery <msalsbery@hotmail.com>\n *\n */\n\n/**\n * @module openseadragon-consolehook\n * @version 2.2.0\n * @requires module:openseadragon\n *\n */\n\nexport default (function (OSD, $) {\n\t// if (!OSD.version || OSD.version.major < 1) {\n\t// \tthrow new Error(\n\t// \t\t'OpenSeadragonConsoleHook requires OpenSeadragon version 1.0.0+'\n\t// \t);\n\t// }\n\n\t/**\n\t * Creates a new ConsoleHook.\n\t *\n\t * @method addConsoleHook\n\t * @memberof external:\"OpenSeadragon.Viewer\"#\n\t * @param {Object} options\n\t * @param {Function} [options.log] - console.log function. Function can return true to prevent original function call.\n\t * @param {Function} [options.debug] - console.debug function. Function can return true to prevent original function call.\n\t * @param {Function} [options.info] - console.info function. Function can return true to prevent original function call.\n\t * @param {Function} [options.warn] - console.warn function. Function can return true to prevent original function call.\n\t * @param {Function} [options.error] - console.error function. Function can return true to prevent original function call.\n\t * @returns {OpenSeadragonImaging.ConsoleHook}\n\t *\n\t **/\n\tOSD.Viewer.prototype.addConsoleHook = function (options) {\n\t\toptions = options || {};\n\t\treturn new $.ConsoleHook(options);\n\t};\n\n\t/**\n\t * Creates a new OpenSeadragonImaging.ConsoleHook.\n\t *\n\t * @class ConsoleHook\n\t * @classdesc Provides hooks into the OpenSeadragon console pipeline.\n\t * @memberof OpenSeadragonImaging\n\t * @param {Object} options\n\t * @param {Function} [options.log] - console.log function. Function can return true to prevent original function call.\n\t * @param {Function} [options.debug] - console.debug function. Function can return true to prevent original function call.\n\t * @param {Function} [options.info] - console.info function. Function can return true to prevent original function call.\n\t * @param {Function} [options.warn] - console.warn function. Function can return true to prevent original function call.\n\t * @param {Function} [options.error] - console.error function. Function can return true to prevent original function call.\n\t *\n\t **/\n\t$.ConsoleHook = function (options) {\n\t\toptions = options || {};\n\n\t\tthis.origHandlers = {};\n\n\t\tfor (let key in options) {\n\t\t\tif (Object.prototype.hasOwnProperty.call(options, key)) {\n\t\t\t\tthis.origHandlers[key] = OSD.console[key] || null;\n\t\t\t\t/*jshint loopfunc:true*/\n\t\t\t\t// eslint-disable-next-line no-loop-func\n\t\t\t\t(function (handler) {\n\t\t\t\t\tlet origHandler = OSD.console[key];\n\t\t\t\t\tOSD.console[key] = function () {\n\t\t\t\t\t\tif (!handler.apply(this, arguments) && origHandler) {\n\t\t\t\t\t\t\torigHandler.apply(this, arguments);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t})(options[key]);\n\t\t\t\t/*jshint loopfunc:false*/\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * ConsoleHook version.\n\t * @member {Object} OpenSeadragonImaging.ConsoleHook.version\n\t * @static\n\t * @property {String} versionStr - The version number as a string ('major.minor.revision').\n\t * @property {Number} major - The major version number.\n\t * @property {Number} minor - The minor version number.\n\t * @property {Number} revision - The revision number.\n\t */\n\t$.ConsoleHook.version = {\"versionStr\":\"2.2.0\",\"major\":2,\"minor\":2,\"revision\":0};\n\n\t/**\n\t * Remove hooks and OpenSeadragon.console references. Call before\n\t * OpenSeadragon.Viewer.destroy().\n\t * @function OpenSeadragonImaging.ConsoleHook.prototype#destroy\n\t * @since 2.2.0\n\t */\n\t$.ConsoleHook.prototype.destroy = function () {\n\t\tfor (let key in this.origHandlers) {\n\t\t\tOSD.console[key] = this.origHandlers[key];\n\t\t}\n\t\tthis.origHandlers = {};\n\t};\n\n\treturn $.ConsoleHook;\n})(\n\tOpenSeadragon || window.OpenSeadragon,\n\t(window.OpenSeadragonImaging = window.OpenSeadragonImaging || {})\n);\n"],"sourceRoot":""}